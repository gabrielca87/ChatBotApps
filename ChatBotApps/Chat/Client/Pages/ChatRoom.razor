@page "/chat-room"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using System.ComponentModel.DataAnnotations

@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<h3>Chat</h3>

<div @ref="_divMessages" class="overflow-auto bg-light div-scrollable">
    <div class="row">
        @foreach (var chatMessage in _messages)
        {
            @if (_currentUser == chatMessage.User)
            {
                <div class="col-md-12 text-md-right">
                    <div class="text-secondary">@chatMessage.DateTime.ToString("yyyy-MM-dd HH:mm:ss")</div>
                    <div class="text-dark">@chatMessage.Message</div>
                </div>
            }
            else
            {
                <div class="col-md-12 text-md-left">
                    <div class="text-secondary">@chatMessage.User, @chatMessage.DateTime.ToString("yyyy-MM-dd HH:mm:ss")</div>
                    <div class="text-dark">@chatMessage.Message</div>
                </div>
            }
        }
    </div>
</div>

<EditForm Model="_newChatMessage" OnValidSubmit="SendMessage">
    <DataAnnotationsValidator />
    <div class="form-group">
        <InputText class="form-control" @bind-Value="_newChatMessage.Message" />
    </div>

    <button class="btn btn-primary float-right" type="submit">Send Message</button>
</EditForm>

@code {

    private List<ChatMessage> _messages = new();
    private HubConnection _hubConnection;
    private ChatMessage _newChatMessage = new();
    private string _currentUser;
    private ElementReference _divMessages;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        _newChatMessage.User = _currentUser = user.Identity.Name;

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.BaseUri + "hubs/chat-hub")
            .Build();

        _hubConnection.On<string, string, DateTime>("ReceiveMessage", (message, user, dateTime) =>
        {
            var chatMessage = new ChatMessage() { Message = message, User = user, DateTime = dateTime };
            _messages.Add(chatMessage);

            if (_messages.Count > 15)
            {
                _messages.RemoveAt(0);
            }

            StateHasChanged();
            ScrollToBottom();
        });

        await _hubConnection.StartAsync();
    }

    public class ChatMessage
    {
        [Required]
        public string Message { get; set; }
        [Required]
        public string User { get; set; }
        [Required]
        public DateTime DateTime { get; set; }
    }

    public async Task SendMessage()
    {
        await _hubConnection.SendAsync("SendMessage", _newChatMessage.Message, _newChatMessage.User, DateTime.Now);
        _newChatMessage.Message = string.Empty;
    }

    private void ScrollToBottom()
    {
        JSRuntime.InvokeVoidAsync("scrollToBottom", _divMessages);
    }
}
